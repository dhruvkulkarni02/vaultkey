name: Build VaultKey Executables

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            artifact_name: VaultKey.exe
            asset_name: VaultKey-Windows
          - os: macos-latest
            artifact_name: VaultKey
            asset_name: VaultKey-macOS

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cryptography
        pip install click
        pip install tabulate
        pip install pyperclip
        pip install requests
        pip install pyinstaller
    
    - name: Show installed packages
      run: pip list
    
    - name: Create runner script
      shell: bash
      run: |
        cat > run_vaultkey.py << 'EOFPY'
        #!/usr/bin/env python3
        import sys
        import os
        
        # Add current directory to path
        sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
        
        # Import all dependencies to ensure they're bundled
        import cryptography
        import cryptography.fernet
        import click
        import tabulate
        import pyperclip
        import requests
        import urllib
        import urllib.request
        import json
        import base64
        import hashlib
        import re
        import secrets
        import string
        
        # Import our package
        import vaultkey
        from vaultkey.cli import cli
        
        if __name__ == '__main__':
            cli()
        EOFPY
    
    - name: Build with PyInstaller
      shell: bash
      run: |
        pyinstaller --onefile \
          --name="${{ matrix.artifact_name }}" \
          --paths=. \
          --collect-all=cryptography \
          --collect-all=click \
          --collect-all=requests \
          --hidden-import=requests \
          --hidden-import=urllib3 \
          --hidden-import=certifi \
          --hidden-import=charset_normalizer \
          --hidden-import=idna \
          run_vaultkey.py
    
    - name: List dist contents
      shell: bash
      run: ls -la dist/
    
    - name: Test executable
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          ./dist/${{ matrix.artifact_name }} --version || echo "Version test failed"
        else
          chmod +x ./dist/${{ matrix.artifact_name }}
          ./dist/${{ matrix.artifact_name }} --version || echo "Version test failed"
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: dist/${{ matrix.artifact_name }}

  package:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create distribution packages
      run: |
        # Setup directories
        mkdir -p VaultKey/{Windows,Mac,Documentation}
        
        # Copy executables
        cp VaultKey-Windows/VaultKey.exe VaultKey/Windows/
        cp VaultKey-macOS/VaultKey VaultKey/Mac/
        chmod +x VaultKey/Mac/VaultKey
        
        # Create Windows launcher
        cat > VaultKey/Windows/VaultKey.bat << 'EOF'
        @echo off
        title VaultKey Password Manager
        cls
        echo ========================================
        echo     VaultKey Password Manager
        echo ========================================
        echo.
        cd /d "%~dp0"
        VaultKey.exe interactive
        if errorlevel 1 (
            echo.
            echo Press any key to exit...
            pause > nul
        )
        EOF
        
        # Create Mac launcher
        cat > VaultKey/Mac/VaultKey.command << 'EOF'
        #!/bin/bash
        clear
        echo "========================================"
        echo "    VaultKey Password Manager"
        echo "========================================"
        echo
        cd "$(dirname "$0")"
        ./VaultKey interactive
        EOF
        chmod +x VaultKey/Mac/VaultKey.command
        
        # Create README
        cat > VaultKey/README.txt << 'EOF'
        VaultKey Password Manager
        =========================
        
        QUICK START:
        
        WINDOWS:
        1. Open Windows folder
        2. Double-click VaultKey.bat
        
        MAC:
        1. Open Mac folder
        2. Double-click VaultKey.command
        3. If security warning appears:
           - Right-click VaultKey.command
           - Select "Open"
           - Click "Open" in dialog
        
        FIRST TIME:
        1. Create a master password (REMEMBER IT!)
        2. Press 2 to add passwords
        3. Press 4 to copy passwords quickly
        
        NEED HELP?
        - Press 0 to exit
        - Your passwords are encrypted and safe
        - Master password cannot be recovered if forgotten
        EOF
        
        # Create packages
        zip -r VaultKey-Complete.zip VaultKey/
        cd VaultKey/Windows && zip -r ../../VaultKey-Windows.zip . && cd ../..
        cd VaultKey/Mac && zip -r ../../VaultKey-Mac.zip . && cd ../..
    
    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: VaultKey-All-Packages
        path: |
          VaultKey-Complete.zip
          VaultKey-Windows.zip
          VaultKey-Mac.zip
        retention-days: 90
