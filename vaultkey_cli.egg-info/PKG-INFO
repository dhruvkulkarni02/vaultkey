Metadata-Version: 2.4
Name: vaultkey-cli
Version: 1.0.0
Summary: Military-grade password manager with Argon2id encryption and zero-knowledge architecture
Author-email: Dhruv Kulkarni <kulkarnidhruv02@gmail.com>
Maintainer-email: Dhruv Kulkarni <kulkarnidhruv02@gmail.com>
License-Expression: MIT
Project-URL: Homepage, https://github.com/dhruvkulkarni02/vaultkey
Project-URL: Repository, https://github.com/dhruvkulkarni02/vaultkey
Project-URL: Documentation, https://github.com/dhruvkulkarni02/vaultkey#readme
Project-URL: Bug Reports, https://github.com/dhruvkulkarni02/vaultkey/issues
Project-URL: Security Policy, https://github.com/dhruvkulkarni02/vaultkey/blob/main/SECURITY_ENHANCEMENTS.md
Project-URL: Changelog, https://github.com/dhruvkulkarni02/vaultkey/releases
Keywords: password,manager,security,encryption,argon2,cli,vault,zero-knowledge,military-grade,breach-detection,cryptography
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: System Administrators
Classifier: Intended Audience :: End Users/Desktop
Classifier: Topic :: Security :: Cryptography
Classifier: Topic :: System :: Systems Administration
Classifier: Topic :: Utilities
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Operating System :: OS Independent
Classifier: Operating System :: POSIX
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: MacOS
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: cryptography>=41.0.0
Requires-Dist: click>=8.0.0
Requires-Dist: tabulate>=0.9.0
Requires-Dist: pyperclip>=1.8.0
Requires-Dist: argon2-cffi>=21.0.0
Requires-Dist: requests>=2.25.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: flake8>=5.0.0; extra == "dev"
Requires-Dist: build>=0.8.0; extra == "dev"
Requires-Dist: twine>=4.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Provides-Extra: security
Requires-Dist: bandit>=1.7.0; extra == "security"
Requires-Dist: safety>=2.0.0; extra == "security"
Dynamic: license-file

# VaultKey üîê

[![PyPI version](https://badge.fury.io/py/vaultkey-cli.svg)](https://badge.fury.io/py/vaultkey-cli)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)

**Military-grade password manager with Argon2id encryption and zero-knowledge architecture**

VaultKey is a secure, offline password manager that keeps your passwords encrypted locally and never sends them to any server. Your master password is never stored anywhere, ensuring complete zero-knowledge security.

## üöÄ Features

- **üîí Military-Grade Security**: Argon2id memory-hard key derivation with 64MB memory cost
- **üõ°Ô∏è Zero-Knowledge Architecture**: Your passwords never leave your device
- **‚úÖ Integrity Protection**: HMAC-SHA256 verification prevents tampering
- **üö´ Account Lockout Protection**: Automatic lockout after failed attempts
- **üìã Secure Clipboard**: Auto-clearing clipboard with original content restoration
- **üîÑ Vault Versioning**: Backward compatibility with version management
- **üíæ Secure Backups**: Independent encryption keys for backup files
- **üîç Breach Detection**: Check passwords against known data breaches
- **üìä Security Auditing**: Comprehensive password strength analysis
- **üéØ Interactive Mode**: Professional CLI interface with color coding
- **üìÅ Import/Export**: Support for LastPass, 1Password, and other formats

## üì¶ Installation

### From PyPI (Recommended)
```bash
pip install vaultkey-cli
```

### From Source
```bash
git clone https://github.com/dhruvkulkarni02/vaultkey.git
cd vaultkey
pip install -r requirements.txt
```

## Quick Start

### Installation
```bash
# Initialize your vault (first time only)
vk init

# Or using the full command
vaultkey init
```

## Usage Examples

### Basic Password Management
```bash
# Create a new vault (first time only)
vk init

# Add passwords
vk add -s github.com -u developer@email.com -g    # Generate password
vk add -s gmail.com -u myemail@gmail.com          # Enter manually

# Retrieve passwords
vk get -s github --show                           # Show password
vk get -s gmail --copy                            # Copy to clipboard
vk cp github                                      # Quick copy to clipboard

# Search passwords
vk search github                                  # Search by site/username
vk search --type weak                             # Find weak passwords
vk search --type old                              # Find old passwords

# List all passwords
vk list                                           # Basic list
vk list -f git                                    # Filter by 'git'
vk list -v                                        # Verbose with details
vk list --weak-only                               # Show only weak passwords
```

### Security Features
```bash
# Security audit
vk audit                                          # Basic strength audit
vk audit -v                                       # Verbose with details
vk audit -b                                       # Include breach checking
vk audit -w                                       # Show only weak passwords
vk audit -o                                       # Show only old passwords
vk audit -b -v                                    # Full audit with breaches

# Check for breached passwords
vk breaches                                       # Check all passwords
vk breaches -s github.com                         # Check specific site
vk breaches -v                                    # Verbose breach details

# Password generation
vk generate                                       # Generate with defaults
vk generate -l 24                                 # 24 characters
vk generate --no-symbols                          # No special characters
vk generate --no-ambiguous                        # Avoid confusing chars
vk generate -c 5                                  # Generate 5 passwords
```

### Advanced Features
```bash
# Import/Export
vk import-passwords ~/passwords.csv --format csv
vk import-passwords ~/lastpass.csv --format lastpass
vk export-passwords --format json --output backup.json

# Interactive mode
vk interactive                                    # Launch interactive UI

# Delete passwords
vk delete github.com                              # Delete with confirmation
vk delete github.com -f                          # Force delete
```

# VaultKey üîê

A secure, locally-encrypted password manager built from scratch with a focus on security best practices and zero-knowledge architecture.

## Features

### Core Security
- **Strong Encryption**: AES-256 encryption using the `cryptography` library
- **Secure Key Derivation**: PBKDF2 with 100,000 iterations for master password
- **Zero-Knowledge**: Your master password never leaves your device
- **Local Storage**: All data stored locally in encrypted format
- **Cross-Platform**: Works on Windows, macOS, and Linux

### Password Management
- **Password Generation**: Cryptographically secure random password generation
- **Smart Search**: Find passwords with partial site name matching
- **Password History**: Track creation and modification dates
- **Secure Notes**: Add notes to your password entries

### Security Analysis
- **Password Strength Analyzer**: Real-time strength scoring and feedback
- **Entropy Calculation**: Mathematical randomness measurement
- **Pattern Detection**: Identifies common patterns and sequences
- **Time-to-Crack Estimates**: Based on modern GPU capabilities

### Breach Detection
- **HaveIBeenPwned Integration**: Check if passwords appear in data breaches
- **K-Anonymity Protocol**: Never sends your full password hash
- **Severity Classification**: Categorizes risk levels (safe to critical)
- **Batch Checking**: Efficiently scan all passwords at once
- **Real-time Monitoring**: Check new passwords against known breaches

### Import/Export Support
- **Multiple Formats**: CSV, JSON, LastPass, Bitwarden, 1Password
- **Secure Export**: Option to exclude passwords for safe backups
- **Bulk Import**: Import hundreds of passwords efficiently
- **Format Detection**: Auto-detect common password manager exports

## Security Overview

VaultKey implements several security best practices:

- Master passwords are never stored, only the derived encryption key
- All passwords are encrypted using Fernet (AES-128 in CBC mode with HMAC)
- Cryptographically secure random number generation for passwords
- Salted key derivation to prevent rainbow table attacks
- Secure memory handling to minimize sensitive data exposure
- Password strength analysis with actionable feedback
- Breach detection using k-anonymity to protect your passwords

## Installation

### Prerequisites
- Python 3.8 or higher
- pip package manager

### Dependencies
- `cryptography` - For encryption operations
- `click` - For the command-line interface
- `requests` - For breach detection API calls
- `tabulate` - For formatted table output
- `pyperclip` - For clipboard operations
- `flask` - For optional web GUI

### Setup

1. Clone the repository:
```bash
git clone https://github.com/dhruvkulkarni02/vaultkey.git
cd vaultkey
```

2. Create a virtual environment (recommended):
```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

3. Install dependencies:
```bash
pip install -r requirements.txt
```

4. Initialize your vault:
```bash
vk init
```

## Usage

## Command Reference

### Core Commands
- `vk init` - Initialize a new password vault
- `vk add` - Add a new password entry
- `vk get` - Retrieve password by site name
- `vk list` - Display all stored passwords
- `vk search` - Search passwords by site/username/notes
- `vk cp` - Quick copy password to clipboard
- `vk delete` - Remove a password entry

### Security Commands
- `vk audit` - Comprehensive security audit
- `vk breaches` - Check passwords against breach database
- `vk generate` - Generate secure passwords

### Data Management
- `vk import-passwords` - Import from other password managers
- `vk export-passwords` - Export passwords to file
- `vk interactive` - Launch interactive mode

### Command Line Interface

```bash
# Vault Management
vk init                                           # Create new vault
vk interactive                                    # Interactive mode

# Password Operations
vk add --site github.com --username user          # Add password
vk get --site github.com --show                   # Show password
vk cp github                                       # Copy to clipboard
vk delete github.com                              # Delete password

# Search and List
vk list --verbose                                  # Detailed list
vk search "github"                                 # Search passwords
vk list --weak-only                                # Show weak passwords

# Security Analysis
vk audit --breaches --verbose                     # Full security audit
vk breaches --verbose                             # Check all breaches
vk generate --length 24                           # Generate password

# Import/Export
vk import-passwords data.csv --format csv
vk export-passwords --format json
```

### Python API

```python
from vaultkey import PasswordManager

# Initialize the password manager
pm = PasswordManager()
pm.unlock("your-master-password")

# Add a password
pm.add_password("github.com", "username", "password123")

# Generate and store a secure password
secure_pass = pm.generate_password(length=20)
pm.add_password("example.com", "user@example.com", secure_pass)

# Retrieve a password
creds = pm.get_password("github.com")
print(f"Username: {creds['username']}")
print(f"Password: {creds['password']}")
```

## Project Structure

```
vaultkey/
‚îú‚îÄ‚îÄ vaultkey/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ crypto.py          # Encryption/decryption logic
‚îÇ   ‚îú‚îÄ‚îÄ storage.py         # Persistent storage handling
‚îÇ   ‚îú‚îÄ‚îÄ generator.py       # Password generation utilities
‚îÇ   ‚îú‚îÄ‚îÄ strength.py        # Password strength analysis
‚îÇ   ‚îú‚îÄ‚îÄ breach.py          # Breach detection with HIBP
‚îÇ   ‚îú‚îÄ‚îÄ portability.py     # Import/export functionality
‚îÇ   ‚îú‚îÄ‚îÄ manager.py         # Main password manager class
‚îÇ   ‚îî‚îÄ‚îÄ cli.py             # Command-line interface
‚îú‚îÄ‚îÄ tests/
‚îú‚îÄ‚îÄ docs/
‚îú‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ setup.py
‚îú‚îÄ‚îÄ run_vaultkey.py        # Main entry point
‚îú‚îÄ‚îÄ LICENSE
‚îî‚îÄ‚îÄ README.md
```

## Development

### Running Tests

```bash
# Install dev dependencies (if available)
pip install pytest pytest-cov

# Run basic functionality test
python -c "from vaultkey.cli import cli; print('‚úÖ VaultKey imports successfully')"

# Test password generation
python -c "from vaultkey.generator import generate_password; print('Generated:', generate_password(16))"

# Test strength analysis
python -c "from vaultkey.strength import PasswordStrength; ps = PasswordStrength(); print('Strength test:', ps.analyze('Test123!'))"
```

### Building Executables

```bash
# Install PyInstaller
pip install pyinstaller

# Build executable
pyinstaller VaultKey.spec

# The executable will be in dist/VaultKey/
```

### Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

### Security Considerations

If you discover a security vulnerability, please email [your-email] instead of opening a public issue.

## Roadmap

### Completed ‚úÖ
- [x] Core encryption functionality (AES-256)
- [x] Command-line interface with 10+ commands
- [x] Password generation with customizable options
- [x] Password strength analysis and scoring
- [x] Breach detection (HaveIBeenPwned integration)
- [x] Comprehensive security auditing
- [x] Import/export functionality (CSV, JSON, LastPass, etc.)
- [x] Interactive mode with professional UI
- [x] Quick copy to clipboard functionality
- [x] Advanced search with filters
- [x] Password aging and duplicate detection

### In Progress üöß
- [ ] Web-based GUI interface
- [ ] Mobile app considerations
- [ ] Enhanced documentation

### Planned üìã
- [ ] Desktop GUI application (tkinter/PyQt)
- [ ] Browser extension
- [ ] Password history tracking
- [ ] Secure password sharing
- [ ] Cloud sync with end-to-end encryption
- [ ] Biometric unlock (TouchID/FaceID)
- [ ] Emergency access features
- [ ] Two-factor authentication for vault

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

- Built using the [cryptography](https://cryptography.io/) library for strong encryption
- Breach detection powered by [HaveIBeenPwned](https://haveibeenpwned.com/) API
- Password strength algorithms inspired by security best practices
- CLI interface built with [Click](https://click.palletsprojects.com/)
- Table formatting by [tabulate](https://pypi.org/project/tabulate/)

## Security Notice

This password manager implements industry-standard security practices including:
- AES-256 encryption for data at rest
- PBKDF2 key derivation with high iteration counts
- Cryptographically secure random number generation
- K-anonymity for breach checking
- Zero-knowledge architecture

However, this is an educational/personal project. For critical use cases, consider established, audited password managers.

---

**Remember**: Use a strong master password and never share it with anyone!
